{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAEpC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,qBAAqBH,QAAeC,OAE5CG,EAAO,oBAAoBJ,QAAeC,MAAU,GAErDA,EAAM,G,CAIbL,EAAKY,iBAAiB,UAAUC,IAC9BA,EAAEC,iBAEF,MAAMT,EAAQU,OAAOf,EAAKgB,SAASX,MAAMY,OACnCC,EAAOH,OAAOf,EAAKgB,SAASE,KAAKD,OACjCE,EAASJ,OAAOf,EAAKgB,SAASG,OAAOF,OAE3C,IAAK,IAAIG,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAG/BjB,EAAciB,EAAI,EAFKf,EAAQe,EAAIF,GAGhCG,MAAKC,GAAWC,EAAAzB,GAAS0B,OAAOC,QAAQH,KACxCI,OAAMJ,GAAWC,EAAAzB,GAAS0B,OAAOG,QAAQL,I,CAE9CtB,EAAK4B,OAAO","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve(`Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n}\n\nform.addEventListener('submit', e => {\n  e.preventDefault();\n\n  const delay = Number(form.elements.delay.value);\n  const step = Number(form.elements.step.value);\n  const amount = Number(form.elements.amount.value);\n\n  for (let i = 0; i < amount; i++) {\n    const delayOfPromise = delay + i * step;\n\n    createPromise(i + 1, delayOfPromise)\n      .then(message => Notiflix.Notify.success(message))\n      .catch(message => Notiflix.Notify.failure(message));\n  }\n  form.reset();\n});\n"],"names":["$1GAPJ","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","e","preventDefault","Number","elements","value","step","amount","i","then","message","$parcel$interopDefault","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.f1f12694.js.map"}